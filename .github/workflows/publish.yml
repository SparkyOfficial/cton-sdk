name: Build and Publish cton-sdk

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

# Set permissions for GitHub token
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.22.x'
        
    - name: Install OpenSSL via vcpkg
      run: |
        # Check if vcpkg directory exists
        if (!(Test-Path "vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git
        }
        cd vcpkg
        # Bootstrap vcpkg if not already done
        if (!(Test-Path "vcpkg.exe")) {
          cmd /c bootstrap-vcpkg.bat
        }
        cmd /c vcpkg install openssl:x64-windows
        cd ..
        
    - name: Build C++ Core
      run: |
        mkdir cpp\build
        cd cpp\build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DOPENSSL_ROOT_DIR=../../vcpkg/installed/x64-windows
        cmake --build . --config Release
        
    - name: Copy DLL to resources
      run: |
        # Check for the library in different possible locations
        if (Test-Path cpp\build\Release\cton-sdk-core.dll) {
          LIB_FILE=cpp\build\Release\cton-sdk-core.dll
        } elseif (Test-Path cpp\build\cton-sdk-core.dll) {
          LIB_FILE=cpp\build\cton-sdk-core.dll
        } else {
          Write-Host "DLL not found, checking in build directory"
          Get-ChildItem cpp\build\
          exit 1
        }
        
        Copy-Item $LIB_FILE java\src\main\resources\
        Copy-Item $LIB_FILE java\src\main\resources\win32-x86-64\
        
    - name: Build Java Components
      run: |
        cd java
        mvn clean install
        
    - name: Run Tests
      run: |
        cd java
        mvn test
        
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cton-sdk-jar
        path: java/target/cton-sdk-*.jar
        
    - name: Upload DLL Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cton-sdk-dll
        path: |
          cpp/build/Release/cton-sdk-core.dll
          cpp/build/cton-sdk-core.dll
          
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libssl-dev
        
    - name: Clone and Install OpenSSL via vcpkg
      run: |
        # Check if vcpkg directory exists
        if [ ! -d "vcpkg" ]; then
          git clone https://github.com/Microsoft/vcpkg.git
        fi
        cd vcpkg
        # Bootstrap vcpkg if not already done
        if [ ! -f "vcpkg" ]; then
          ./bootstrap-vcpkg.sh
        fi
        ./vcpkg install openssl
        cd ..
        
    - name: Build C++ Core
      run: |
        mkdir cpp/build
        cd cpp/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config Release
        
    - name: Copy SO to resources
      run: |
        # Check for the library in different possible locations
        if [ -f cpp/build/libcton-sdk-core.so ]; then
          LIB_FILE=cpp/build/libcton-sdk-core.so
        elif [ -f cpp/build/cton-sdk-core.so ]; then
          LIB_FILE=cpp/build/cton-sdk-core.so
        else
          echo "SO file not found, checking build directory"
          ls -la cpp/build/
          exit 1
        fi
        
        mkdir -p java/src/main/resources/linux-x86-64/
        cp $LIB_FILE java/src/main/resources/
        cp $LIB_FILE java/src/main/resources/linux-x86-64/
        
    - name: Build Java Components
      run: |
        cd java
        mvn clean install
        
    - name: Run Tests
      run: |
        cd java
        mvn test
        
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cton-sdk-jar-linux
        path: java/target/cton-sdk-*.jar
        
    - name: Upload SO Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cton-sdk-so
        path: |
          cpp/build/libcton-sdk-core.so
          cpp/build/cton-sdk-core.so
    - name: Create Release Assets
      run: |
        # Create artifacts directory
        mkdir -p artifacts
        cd artifacts
        
        # Create platform-specific packages
        # Find the actual library files
        if [ -f "../cpp/build/Release/cton-sdk-core.dll" ]; then
          WINDOWS_LIB="../cpp/build/Release/cton-sdk-core.dll"
        elif [ -f "../cpp/build/cton-sdk-core.dll" ]; then
          WINDOWS_LIB="../cpp/build/cton-sdk-core.dll"
        else
          echo "Windows DLL not found"
          ls -la ../cpp/build/
          exit 1
        fi
        
        if [ -f "../cpp/build/libcton-sdk-core.so" ]; then
          LINUX_LIB="../cpp/build/libcton-sdk-core.so"
        elif [ -f "../cpp/build/cton-sdk-core.so" ]; then
          LINUX_LIB="../cpp/build/cton-sdk-core.so"
        else
          echo "Linux SO not found"
          ls -la ../cpp/build/
          exit 1
        fi
        
        # Create zip with the actual library files
        mkdir -p temp/windows
        mkdir -p temp/linux
        cp $WINDOWS_LIB temp/windows/
        cp $LINUX_LIB temp/linux/
        zip -r cton-sdk-windows.zip temp/windows/
        tar -czf cton-sdk-linux.tar.gz temp/linux/
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/cton-sdk-windows.zip
          artifacts/cton-sdk-linux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  deploy-website:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./website
        publish_branch: gh-pages
        user_name: github-actions[bot]
        user_email: github-actions[bot]@users.noreply.github.com
        force_orphan: true