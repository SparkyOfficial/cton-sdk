// CryptoSecurityTest.cpp - —Ç–µ—Å—Ç –±–µ–∑–ø–µ–∫–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
// Author: –ê–Ω–¥—Ä—ñ–π –ë—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ (Sparky)
// Crypto security test
// –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

#include "../include/Crypto.h"
#include "TestFramework.h"
#include <iostream>
#include <vector>
#include <string>

using namespace cton;

int main() {
    std::cout << "CTON-SDK Crypto Security Test" << std::endl;
    std::cout << "=============================" << std::endl;
    
    try {
        // 1. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        // 1. Private key generation test
        // 1. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        std::cout << "\n1. Private Key Generation Test:" << std::endl;
        PrivateKey privateKey = PrivateKey::generate();
        std::vector<uint8_t> keyData = privateKey.getData();
        ASSERT_EQUAL(keyData.size(), 32, "Private key should be 32 bytes");
        std::cout << "   ‚úì Private key generated successfully" << std::endl;
        
        // 2. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        // 2. Public key derivation test
        // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        std::cout << "\n2. Public Key Derivation Test:" << std::endl;
        PublicKey publicKey = privateKey.getPublicKey();
        std::vector<uint8_t> pubKeyData = publicKey.getData();
        ASSERT_EQUAL(pubKeyData.size(), 32, "Public key should be 32 bytes");
        std::cout << "   ‚úì Public key derived successfully" << std::endl;
        
        // 3. –¢–µ—Å—Ç –ø—ñ–¥–ø–∏—Å—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        // 3. Signature and verification test
        // 3. –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        std::cout << "\n3. Signature and Verification Test:" << std::endl;
        std::string message = "Hello, TON!";
        std::vector<uint8_t> messageBytes(message.begin(), message.end());
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å
        // Create signature
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        std::vector<uint8_t> signature = Crypto::sign(privateKey, messageBytes);
        ASSERT_EQUAL(signature.size(), 64, "Signature should be 64 bytes");
        std::cout << "   ‚úì Signature created successfully" << std::endl;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å
        // Verify signature
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        bool isValid = Crypto::verify(publicKey, messageBytes, signature);
        ASSERT_TRUE(isValid, "Signature should be valid");
        std::cout << "   ‚úì Signature verified successfully" << std::endl;
        
        // 4. –¢–µ—Å—Ç –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É
        // 4. Invalid signature test
        // 4. –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
        std::cout << "\n4. Invalid Signature Test:" << std::endl;
        std::string wrongMessage = "Wrong message";
        std::vector<uint8_t> wrongMessageBytes(wrongMessage.begin(), wrongMessage.end());
        bool isInvalid = Crypto::verify(publicKey, wrongMessageBytes, signature);
        ASSERT_FALSE(isInvalid, "Signature should be invalid for wrong message");
        std::cout << "   ‚úì Invalid signature correctly rejected" << std::endl;
        
        // 5. –¢–µ—Å—Ç secp256k1
        // 5. Secp256k1 test
        // 5. –¢–µ—Å—Ç secp256k1
        std::cout << "\n5. Secp256k1 Test:" << std::endl;
        Secp256k1PrivateKey secpPrivateKey = Secp256k1PrivateKey::generate();
        std::vector<uint8_t> secpKeyData = secpPrivateKey.getData();
        ASSERT_EQUAL(secpKeyData.size(), 32, "Secp256k1 private key should be 32 bytes");
        std::cout << "   ‚úì Secp256k1 private key generated successfully" << std::endl;
        
        Secp256k1PublicKey secpPublicKey = secpPrivateKey.getPublicKey();
        std::vector<uint8_t> secpPubKeyData = secpPublicKey.getData();
        ASSERT_TRUE(secpPubKeyData.size() == 33 || secpPubKeyData.size() == 65, 
                   "Secp256k1 public key should be 33 or 65 bytes");
        std::cout << "   ‚úì Secp256k1 public key derived successfully" << std::endl;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å secp256k1
        // Create secp256k1 signature
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å secp256k1
        std::vector<uint8_t> secpSignature = Crypto::signSecp256k1(secpPrivateKey, messageBytes);
        ASSERT_EQUAL(secpSignature.size(), 64, "Secp256k1 signature should be 64 bytes");
        std::cout << "   ‚úì Secp256k1 signature created successfully" << std::endl;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å secp256k1
        // Verify secp256k1 signature
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å secp256k1
        bool secpIsValid = Crypto::verifySecp256k1(secpPublicKey, messageBytes, secpSignature);
        ASSERT_TRUE(secpIsValid, "Secp256k1 signature should be valid");
        std::cout << "   ‚úì Secp256k1 signature verified successfully" << std::endl;
        
        std::cout << "\nüéâ All crypto security tests passed!" << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Test failed with exception: " << e.what() << std::endl;
        return 1;
    }
}